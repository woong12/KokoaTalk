margin = box의 border(경계)의 바깥에 있는 공간
margin: x; = 상하좌우 모두 젹용
margin: x x; = 상하 좌우
margin x x x x; 위 오 아 왼


flexbox 사용 규칙
1. 자식 엘리먼트에는 어떤 것도 적지 말아야 함.
자식 엘리먼트를 움직이게 하려면 부모 엘리먼트를 flex container로 만들어야 한다.
2. align-items : cross axis에서 작용 (세로)
3. justify-content : main axis에서 작용 (가로) (디폴트)
flex-container가 height를 가지고 있지 않으면 align-items를 사용하더라도 위치가 바뀌지 않음.
vh = viewport height (스크린에 따라 다름)

1. positon: static (default)
2. position: fixed
- element가 처음 생성된 자리에 고정.
3. position: relative;
- element가 '처음 생성된 위치'를 기준점으로, top bottom left right으로 위치를 조금씩 수정할 수 있다.
4. position: absolute;
가장 가까운 relative 부모를 기준으로 이동
position:relative; 를 해주면 부모가 된다.
없으면 body.

pseudo selector
좀더 세부적으로 엘리먼트를 선택해 주는 것!
(기존 방법 : 태그, id w/#, class w/.)

선택의 복잡한 과정을 pseudo selector로 가능함
ex>
div:first-child {
background-color: tomato;
}

/* pseudo selector */
div:last-child {
background-color: teal;
}
id나 class를 따로 만드는것보다 이렇게 지정하는게 훨씬 좋은 방법이다.
css에서만 선택을 하면 되니까! html코드를 고칠 필요가 없기 때문이다

n번째 태그 수정하기 nth-child(n) 올ㅋ
span:nth-child(2) {
background-color: teal;
}
span:nth-child(even) { //or odd ( 홀수 )
background-color: teal;
}

even은 짝수! 짝수번째를 모두 바꿀 수있다 오 so cool !


span:nth-child(5n + 1) {
background-color: silver;
}
n을 사용하면 매우 편하다
div의 바로 밑 자식에서 span을 찾아서 그것만 효과를 주는 방법
1)
div span {
text-decoration : underline;
}
이렇게하면 div밑에 있는 모든 span이 효과를 가진다
직접적인 부모가 아니어도 밑에있는 것들을 모두 css가 찾는다.

2) div > span {
text-decoration : underline;
}
이렇게하면 바로 밑!!! 을 찾게 되므로 바로 밑의 자식만 건들일수있게된다.

형제에게 효과를 주는방법

p + span {
color: black;

}
+ 를 사용하면 형제에게 영향을 끼칠 수 있다. cool


※ > 를 사용하면 direct child를 찾고, + 를 사용하면 바로 코드상 밑에 있는 sibling을 찾게된다.

#combinator
p span{} 부모자식관계
p>span{} 부모와 바로 밑 자식관계
p+span{} 바로 다음에 오는 형제관계
p~span{} 바로 다음에 오지 않아도 되는 형제관계

#attribute
input[type="word"]{} type="word"인 input만을 선택
input[type~="word"]{} "word"를 포함하는 input선택
input[type$="word"]{} 끝에 "word"가 오는 input 선택
input[type^="word"]{} 앞에 "word"가 오는 input 선택

#state
:hover 커서가 올라간상태
:active 클릭할때
:focus 키보드로 선택한경우
:visited link에서 쓰이고 사이트를 방문한 이력이 있을경우
:focus-within 자식들중 하나라도 focus상태에 있다면 부모가 바뀔때 쓰임

#pseudo element
::placeholder placehoder만을 꾸밀때 사용
::selection 드래그 했을때
::first-letter 앞 글자에
::first-line 첫 줄

Color
color는 정말 css 에서중요하다
css에서 알아야할 color system
1) hexadecimal color (16진수 컬러)
#000000 <
2)RGB 방식
-> 이건 디자이너들이 많이쓴다
rgb(252,206,0); 이런식
rgba (205,23,0, 0.5);
4번째 숫자는 투명도를 말한다 !
a 즉 알파는 투명도를 말하는 것이다

Variable (custom properties )

variable도 정말 중요하다 !!!
이게 css를 프로그래밍언어처럼 보여준다
프로그래밍언어는아니지만 그 장점을 보여주는것임

:root 라는 엘리먼트에 변수를 추가하는 것이다
:root은 기본적으로 모든 document의 뿌리가 되는 것이다
출발점이 되는 것이다
여기에 변수이름을 쓰고
--main-color라고 변수이름을 주고
이것을 document의 root에 저장하는것이다

--를 써주고 변수이름을 써줘야한다
변수는 -- 2개 그리고 변수이름
빈공간이 있다면 -로 채워야한다.
물론 컬러만 저장할 수 있는게 아니다!
--default-border: 1px solde var(--main-color);


그 다음 이 변수를 사용할 곳에
p {
background-color: var(--main-color);
}
a {
background-color: var(--main-color);
}

transition
어떤 상태에서 다른 상태로의 변화! 를 보내주는 애니매이션이다

rule1> transtion은 state가 없는 요소에 붙어야한다
처음 생긴곳에 있어야한다
state에 transition을 준다면 변화를 준것(예를들면 hover라면 마우스를 갖다 댄것)을 그만할경우(마우스를 뗄경우)
원래상태로 바로 돌아간다
rule2> transtion 에 변화를 준것들은 state에 들어있는것들이 기준이 되어 바뀌는것이다
바뀌는 것들에 한정하여 transition 이 일어날 수 있다
https://matthewlein.com/tools/ceaser

#4.1
transition 은 상태에 따라 바귀는 요소가 있을때 사용함
상태 ex) hover, active, focus ...
ease-in function : 브라우저에게 변화하는 방법을 알려주는 역할
ㄴlinear - 변화 그래프가 직선
ㄴease-in - 시작과 끝이 빠름
ㄴease-out - 시작과 끝이 느림
ㄴease-in-out - 시작이 빠르고 끝이 느림
all : 변화 요소를 한번에 다룬다.
ㄴ따로 다루고 싶으면 각각 써주면 됨

cubic-bezier(0, 0, 0, 0); 으로 직접 설정할수도 있다.

transformation

한 요소를 말 그대로 변형시킬수 있기 때문에 개쩐다
css로 3D까지 할수 있기 때문에 cool한것임
transform 안에 엄청나게 많은 기능들이 있다

transformation은 box element를 변형시키지 않는다.
즉, 옆에 sibling들에게 영향을 끼치지 않는다.
margin, padding이 적용되지 않는다. 일종의 3D transformation이기 때문이다.
margin이나 padding을 주기위해서 tarnslateX, trnasLateY 를 사용하는것이 아니다!
다른 요소의 box를 변형시키지 않고 원하는 요소를 이동시키기 위해서 사용하는 것이다.
trransformation 은 페이지의 픽셀의 다른 부분에서 일어난다.
transformatino은 box차원에서 일어나지 않는다.
tronsformation 을 결합 가능하다!
CSS의 3D는 GPU로 돌아간다 즉 3D작업을 할 수 있다
transformation 은 이것 역시 엄청나게 많은 document가 있다 확인해서 combine할 수 있다
transition 과 transformation 을 합친다면 아름다운 애니매이션을 만들 수 있다

애니메이션 만들기
@keyframes 애니메이션 이름 {
from{
}
to {
}
}
사용하기
img {
animation : 애니메이션 이름 재생시간 옵션
}
무한으로 반복되게 하려면 뒤에 infinite를 붙여준다.

Animations

https://animista.net/

- from to 말고, 1,2,3,4,5...10 혹은 0% 25% 50% 75% 100% 같이 여러 단계로 나뉘어 애니매이션을 만들 수 있다.
- 다른 property들도 애니매이션으로 만들 수 있다. 꼭 transform만 써야하는 건 아니지만, transform을 쓰는걸 권한다. 
일부 property는 애니매이션이 잘 안되기 때문이다.

Media query

- Media query는 오직 CSS만을 이용해서 스크린의 사이즈를 알 수 있는 방법이다.(웹사이트를 보고 있는 사용자의 스크린 사이즈)
- @media screen and (max-width: 00px) {} 을 이용하여 몇 픽셀부터는 달라보이도록 만들 수 있다. 이를 통해 스크린의 사이즈를 알 수 있다.
- min 사이즈와 max사이즈를 조절하여 단계별로 만들면, 스크린 사이즈의 범위를 알 수 있다.
- 브라우저에서 inspect의 device toolbar를 이용하여 핸드폰 기종 별 사이즈로 브라우저를 볼 수 있다.
- media screen에 (orientation: landscape)를 이용하면, 세로모드인지 가로모드인지도 구별 할 수 있다.

Media Queries 주요기능
- min-device-width
- max-device-width
- orientation: landscape 가로
- orientation: portrait  세로
- aspect-ration - 레티나디스플레이 감지가능
- display-mode
- inverted-colors
- lightlevel
- prefers-contrast
- resolution
- monochrome

Media type
- @media screen{}
- @media print{}

[Using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)